<?php

namespace ClientesBundle\Repository;

use Libreria;

/**
 * DireccionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DireccionRepository extends \Doctrine\ORM\EntityRepository
{
    /* 
    * Obtiene el listado de los clientes de una empresa
    */
    public function dameClienteDireccion($direccion){
            // Devuelve el c贸digo del cliente de una direcci贸n dada

            $consulta = $this->getQueryBuilder();
            
            $consulta->select('c.id')
                     ->leftJoin('d.cliente', 'c')
                     ->Where("d.id =:id")
                     ->setParameter('id', $direccion);
            

            $cliente= $consulta->getQuery()->getResult();
            foreach ($cliente as $item){
               $codigoCliente =  $item['id']; 
            }
            return $codigoCliente;
    }
    
    public function dameDistritoDireccion(){
            // Devuelve los campos para el listado de distritos

            $consulta = $this->getQueryBuilder();
            
            $consulta->select('d.direccion',
                            'd.telefono',
                            'd.observaciones',
                            'dist.distrito',
                            'c.nombre', 'p.modelo', 'p.fechaNuevoMantenimiento','p.periodicidad','p.premium')
                     ->leftJoin('d.cliente', 'c')
                     ->leftJoin('d.producto', 'p')
                     ->leftJoin('d.distrito', 'dist');
            $consulta->orderby('d.distrito', 'ASC')
                     ->addOrderBy('p.fechaNuevoMantenimiento', 'DESC')
                     ->getQuery();
            

            $lista= $consulta->getQuery()->getResult();

            return $lista;
    }
    
    /* 
    * Devuelve los campos para los partes nuevos de los productos con mantenimiento
    *  en el mes de la fecha.
    * - $Id Es la id de la direcci贸n
    */

    public function dameProductosPorDireccion($id,$fecha){

        $inicio = Libreria::dameFechaInicial($fecha);
        $fin = Libreria::dameFechaFinal($fecha);
        $consulta = $this->getQueryBuilder();     
        $consulta->select('d.id','d.direccion','c.id as cliente','c.nombre',
                        'd.telefono','d.poblacion','d.codigoPostal',
                        'd.observaciones','dist.distrito',
                        'p.id as producto','p.modelo', 'p.fechaNuevoMantenimiento','p.observaciones as observacionesProducto',
                        'p.periodicidad','p.premium','p.base as importe','p.IVA')
                 ->leftJoin('d.cliente', 'c')
                 ->leftJoin('d.producto', 'p')
                 ->leftJoin('d.distrito', 'dist')
                 ->Where ('d.id = :id')
                 ->andWhere('p.fechaNuevoMantenimiento BETWEEN :inicio AND :fin')
                 ->setParameter('inicio', $inicio) 
                 ->setParameter('fin', $fin)
                 ->setParameter('id', $id);
        $consulta->orderby('d.distrito', 'ASC')
                 ->addOrderBy('p.fechaNuevoMantenimiento', 'DESC')
                 ->getQuery();


        $lista= $consulta->getQuery()->getResult();

        return $lista;
    }
    
    /* 
    * Devuelve los campos para los partes nuevos de las incidencias
    *  en el mes de la fecha.
    * - $Id Es la id de la direcci贸n
    */
    public function dameIndicenciasPorDireccion($id){
        // Devuelve los campos para los partes nuevos

        $consulta = $this->getQueryBuilder();

        $consulta->select('d.id','d.direccion','c.id as cliente','d.telefono','d.poblacion','d.codigoPostal','d.observaciones',
                        'dist.distrito',
                        'i.id as incidencia','i.descripcion','i.observaciones as observacionesIncidencia','i.importe',
                        'c.nombre', 'p.id as producto','p.modelo', 'p.fechaNuevoMantenimiento','p.periodicidad','p.premium','p.IVA')
                 ->leftJoin('d.cliente', 'c')
                 ->leftJoin('d.incidencia', 'i')
                 ->leftJoin('d.distrito', 'dist')
                 ->leftJoin('i.producto', 'p')
                 
                 
                 ->Where ('d.id = :id')
//                 ->andWhere('i.planificada = false')
                 ->setParameter('id', $id);
        $consulta->orderby('d.distrito', 'ASC')
                 ->addOrderBy('i.fecha', 'DESC')
                 ->getQuery();


        $lista= $consulta->getQuery()->getResult();

        return $lista;
    }

    
    public function dameDistritoDireccionEntreFechas($inicio, $fin){
            // Devuelve los campos para el listado de distritos

            $consulta = $this->getQueryBuilder();
            
            $consulta->select('d.id','d.direccion','c.id as cliente',
                            'd.telefono',
                            'd.observaciones',
                            'dist.distrito',
                            'c.nombre', 'p.modelo', 'p.fechaNuevoMantenimiento','p.periodicidad','p.premium', 'p.planificada')
                    ->leftJoin('d.cliente', 'c')
                    ->leftJoin('d.producto', 'p')
                    ->leftJoin('d.distrito', 'dist')
                    ->Where('p.fechaNuevoMantenimiento BETWEEN :inicio AND :fin') 
                    ->setParameter('inicio', $inicio) 
                    ->setParameter('fin', $fin);
            $consulta->orderby('d.distrito', 'ASC')
                     ->addOrderBy('p.fechaNuevoMantenimiento', 'DESC')
                     ->getQuery();
            

            $lista= $consulta->getQuery()->getResult();

            return $lista;
    }

    public function dameMantenimientosAnteriores($inicio, $fin){
            // Devuelve los campos para el listado de distritos

            $consulta = $this->getQueryBuilder();
            
            $consulta->select('d.id','d.direccion','c.id as cliente',
                            'd.telefono',
                            'd.observaciones',
                            'dist.distrito',
                            'c.nombre', 'p.modelo', 'p.fechaNuevoMantenimiento','p.periodicidad','p.premium', 'p.planificada')
                    ->leftJoin('d.cliente', 'c')
                    ->leftJoin('d.producto', 'p')
                    ->leftJoin('d.distrito', 'dist')
                    ->Where('p.fechaNuevoMantenimiento BETWEEN :inicio AND :fin') 
                    ->andWhere('p.planificada IS NULL')
                    ->setParameter('inicio', $inicio) 
                    ->setParameter('fin', $fin);
            $consulta->orderby('d.distrito', 'ASC')
                     ->addOrderBy('p.fechaNuevoMantenimiento', 'DESC')
                     ->getQuery();
            

            $lista= $consulta->getQuery()->getResult();

            return $lista;
    }
    
    public function dameDistritoDireccionIncidenciasEntreFechas($inicio, $fin){
            // Devuelve los campos para el listado de distritos

            $consulta = $this->getQueryBuilder();
            
            $consulta->select('d.id','d.direccion',
                            'd.telefono',
                            'd.observaciones',
                            'dist.distrito',
                            'c.nombre', 'i.fecha', 'i.descripcion', 'p.modelo','p.premium', 'i.planificada')
                    ->leftJoin('d.cliente', 'c')
                    ->leftJoin('d.incidencia', 'i')
                    ->leftJoin('i.producto', 'p')
                    ->leftJoin('d.distrito', 'dist')
                    ->Where('i.fecha BETWEEN :inicio AND :fin')
                    ->andWhere('i.fechaResuelta IS NULL')
                    ->setParameter('inicio', $inicio) 
                    ->setParameter('fin', $fin);
            $consulta->orderby('d.distrito', 'ASC')
                     ->addOrderBy('i.fecha', 'DESC')
                     ->getQuery();
            

            $lista= $consulta->getQuery()->getResult();

            return $lista;
    }
    
    private function getQueryBuilder()
    {
        $em = $this->getEntityManager();

        $qb = $em->getRepository('ClientesBundle:Direccion')
            ->createQueryBuilder('d');

        return $qb;
    }
    
 
}
